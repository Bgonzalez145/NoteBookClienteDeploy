{"version":3,"file":"auth.d.ts","sources":["auth.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { FirebaseOptions, FirebaseAppConfig, ɵPromiseProxy } from '@angular/fire';\r\nimport { User, auth } from 'firebase/app';\r\nexport interface AngularFireAuth extends ɵPromiseProxy<auth.Auth> {\r\n}\r\nexport declare class AngularFireAuth {\r\n    /**\r\n     * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\r\n     */\r\n    readonly authState: Observable<User | null>;\r\n    /**\r\n     * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\r\n     */\r\n    readonly idToken: Observable<string | null>;\r\n    /**\r\n     * Observable of the currently signed-in user (or null).\r\n     */\r\n    readonly user: Observable<User | null>;\r\n    /**\r\n     * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\r\n     * helper properties for getting different data associated with the token as well as all the decoded payload claims\r\n     * (or null).\r\n     */\r\n    readonly idTokenResult: Observable<auth.IdTokenResult | null>;\r\n    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, platformId: Object, zone: NgZone);\r\n}\r\n"]}